name: Deploy from Development branch to Staging server

on:
  push:
    branches:
    - Development
  workflow_dispatch:
    inputs:
      version:
        description: Deploy to Staging
        required: true

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
        - 5432:5432
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create logs directory
      run: mkdir -p logs

    - name: Create static directory
      run: mkdir static

    - name: Run migrations
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
      run: |
        python manage.py migrate

    - name: Run tests
      env:
        DJANGO_ENVIRONMENT: production
        POSTGRES_NAME: test_db
        POSTGRES_USER: test_user
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        POSTGRES_DB: localhost
        POSTGRES_PASSWORD: test_password
        SECRET_KEY: test_secret_key_1234567890
      run: |
        python manage.py test

  build_and_push:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.12"]
    steps:
    - name: Checkout Development branch
      uses: actions/checkout@v3

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_DOCKER_REGISTRY_API_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Docker image for Nginx
      run: docker build
        --file ./devops/docker/nginx/Dockerfile
        --tag ${{ secrets.DO_DOCKER_REGISTRY_NAME }}/plan_visualiser_2023_02-nginx:$(echo $GITHUB_SHA | head -c7)
        .

    - name: Build Docker image for Gunicorn
      run: docker build
        --file ./devops/docker/gunicorn/Dockerfile
        --tag ${{ secrets.DO_DOCKER_REGISTRY_NAME }}/plan_visualiser_2023_02-django_gunicorn:$(echo $GITHUB_SHA | head -c7)
        .

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    - name: Push Nginx image to DigitalOcean Container Registry
      run: docker push ${{ secrets.DO_DOCKER_REGISTRY_NAME
        }}/plan_visualiser_2023_02-nginx:$(echo $GITHUB_SHA | head -c7)

    - name: Push Gunicorn image to DigitalOcean Container Registry
      run: docker push ${{ secrets.DO_DOCKER_REGISTRY_NAME
        }}/plan_visualiser_2023_02-django_gunicorn:$(echo $GITHUB_SHA | head
        -c7)

  deploy_code_and_pull_docker:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout Development branch
        uses: actions/checkout@v3

      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DO_STAGING_DROPLET_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DO_DROPLET_STAGING_HOST_IP }} > ~/.ssh/known_hosts

      - name: connect and pull
        run: |
          chmod +x ./deploy_on_remote.sh  # Note this is on the runner - not the live server!!
#          ssh -o StrictHostKeyChecking=no root@"${{ secrets.DO_DROPLET_STAGING_HOST_IP }}" 'bash -s' -- ${{ secrets.POSTGRES_DB_NAME }} ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_PASSWORD }} ${{ secrets.DJANGO_SECRET_KEY }} $(echo $GITHUB_SHA | head -c7) staging ${{ secrets.DO_DOCKER_REGISTRY_NAME }} ${{ secrets.DO_DOCKER_REGISTRY_API_TOKEN }} < ./deploy_on_remote.sh
          ssh -o StrictHostKeyChecking=no root@"${{ secrets.DO_DROPLET_STAGING_HOST_IP }}" 'bash -s' -- "postgres" ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_PASSWORD }} ${{ secrets.DJANGO_SECRET_KEY }} $(echo $GITHUB_SHA | head -c7) staging ${{ secrets.DO_DOCKER_REGISTRY_NAME }} ${{ secrets.DO_DOCKER_REGISTRY_API_TOKEN }} < ./deploy_on_remote.sh

      - name: clean up after ssh session.
        run: rm -rf ~/.ssh
