name: Build Docker images and push to Digital Ocean Repository

on:
  workflow_call:
    inputs:
      python_version:
        description: Python version
        required: true
        type: string
      environment:
        description: Environment we are deploying to
        required: true
        type: string
      branch:
        description: Branch being deployed (e.g., development, main)
        required: true
        type: string
    secrets:
      SECRET_DO_DOCKER_REGISTRY_API_TOKEN:
        required: true
      SECRET_DO_DOCKER_REGISTRY_NAME:
        required: true
      INITIAL_USER_EMAIL_DOMAIN:
        required: true
      SECRET_SHARED_USER_NAME:
        required: true
      SECRET_SHARED_USER_PASSWORD:
        required: true
      SECRET_APP_USER_1_NAME:
        required: true
      SECRET_APP_USER_1_PASSWORD:
        required: true
      SECRET_ADMIN_NAME:
        required: true
      SECRET_ADMIN_PASSWORD:
        required: true


jobs:
  pull-and-deploy-docker-images:
    runs-on: ubuntu-latest
    steps:
    # Install python on the runner to run deployment script deploy_on_remote.sh
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    # Checkout code as it contains deployment script deploy_on_remote.sh
    - name: Checkout ${{ inputs.branch }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history so we can pull the latest commit
        ref: ${{ inputs.branch }}  # Ensure this is the branch where the commit was pushed

    # Log messages to diagnose issue with wrong image being pulled
    - name: Logging messages to confirm which commit is being checked out.
      run: |
        echo "Checked out Commit SHA: $(git rev-parse HEAD)"
        echo "Image Tag Content:"
        cat devops/image_tag.txt

    # Read image tag from repo which was written during build of images as part of staging deployment.
    - name: Read image tag
      id: set-image-tag
      run: |
        IMAGE_TAG=$(cat devops/image_tag.txt)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Install SHH keys in order to ssh into the target server to deploy new docker images.
    - name: Install SSH keys
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo "${{ secrets.SECRET_DO_DROPLET_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.SECRET_DO_DROPLET_HOST_IP }}" > ~/.ssh/known_hosts

    # Ensure the deployment script is executable and then run it
    - name: Connect and pull Docker images on droplet
      run: |
        # Hard coding name of secrets to test whether dynamic secret names can work
        chmod +x ./devops/ci-scripts/deploy-on-remote.sh  # Note this is on the runner - not the live server!!
        ssh -o StrictHostKeyChecking=no root@"${{ secrets.SECRET_DO_DROPLET_HOST_IP }}" 'bash -s' -- \
          "${{ secrets.SECRET_POSTGRES_DB_NAME }}" \
          "${{ secrets.SECRET_POSTGRES_USER }}" \
          "${{ secrets.SECRET_POSTGRES_PASSWORD }}" \
          "${{ secrets.SECRET_DJANGO_SECRET_KEY }}" \
          "${{ steps.set-image-tag.outputs.IMAGE_TAG }}" \
          "${{ inputs.environment }}" \
          "${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}" \
          "${{ secrets.SECRET_DO_DOCKER_REGISTRY_API_TOKEN }}" \
          "${{ secrets.SECRET_SHARED_USER_NAME }}" \
          "${{ secrets.SECRET_SHARED_USER_PASSWORD }}" \
          "${{ secrets.SECRET_APP_USER_1_NAME }}" \
          "${{ secrets.SECRET_APP_USER_1_PASSWORD }}" \
          "${{ secrets.SECRET_ADMIN_NAME }}" \
          "${{ secrets.SECRET_ADMIN_PASSWORD }}" \
          "${{ secrets.INITIAL_USER_EMAIL_DOMAIN }}" \
          < ./devops/ci-scripts/deploy-on-remote.sh
