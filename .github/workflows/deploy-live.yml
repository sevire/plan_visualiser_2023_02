name: Deploy from master branch to Live server

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: Deploy to Live
        required: true

jobs:
  setup_new_server:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: install ssh keys
      run: >
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo "${{ secrets.DO_LIVE_DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DO_DROPLET_LIVE_HOST_IP }} > ~/.ssh/known_hosts

    - name: Run setup script on remote server
      env:
        DOMAIN: planononepage.com
        USERNAME: yourusername  # Replace with your actual username
      run: |
        chmod +x devops/live_server_setup.sh
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DO_DROPLET_LIVE_HOST_IP }} 'bash -s' < devops/live_server_setup.sh
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        env:
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        run: python manage.py migrate

      - name: Run tests
        env:
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        run: python manage.py test

  build_and_push:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_DOCKER_REGISTRY_API_TOKEN }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image for Nginx
        run: |
          docker build \
            --file ./devops/docker/nginx/Dockerfile \
            --tag ${{ secrets.DO_DOCKER_REGISTRY_NAME }}/plan_visualiser_2023_02-nginx:$(echo $GITHUB_SHA | head -c7) \
            .

      - name: Build Docker image for Gunicorn
        run: |
          docker build \
            --build-arg POSTGRES_DB_NAME=${{ secrets.POSTGRES_DB_NAME }} \
            --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} \
            --build-arg DJANGO_ENVIRONMENT_TYPE=${{ secrets.DJANGO_ENVIRONMENT }} \
            --file ./devops/docker/gunicorn/Dockerfile \
            --tag ${{ secrets.DO_DOCKER_REGISTRY_NAME }}/plan_visualiser_2023_02-django_gunicorn:$(echo $GITHUB_SHA | head -c7) \
            .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push Nginx image to DigitalOcean Container Registry
        run: docker push ${{ secrets.DO_DOCKER_REGISTRY_NAME }}/plan_visualiser_2023_02-nginx:$(echo $GITHUB_SHA | head -c7)

      - name: Push Gunicorn image to DigitalOcean Container Registry
        run: docker push ${{ secrets.DO_DOCKER_REGISTRY_NAME }}/plan_visualiser_2023_02-django_gunicorn:$(echo $GITHUB_SHA | head -c7)

  deploy_code_and_pull_docker:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_DOCKER_REGISTRY_API_TOKEN }}

      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DO_LIVE_DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DO_DROPLET_LIVE_HOST_IP }} > ~/.ssh/known_hosts

      - name: Connect and pull Docker images on droplet
        run: |
          ssh root@${{ secrets.DO_DROPLET_LIVE_HOST_IP }} "cd /docker_app_root/plan_visualiser_2023_02 && \
          export POSTGRES_DB_NAME=${{ secrets.POSTGRES_DB_NAME }} && \
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }} && \
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_DB_PASSWORD }} && \
          export DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} && \
          export DJANGO_ENVIRONMENT=${{ secrets.DJANGO_ENVIRONMENT }} && \
          export DO_DOCKER_REGISTRY_NAME=${{ secrets.DO_DOCKER_REGISTRY_NAME }} && \
          sh deploy_on_remote.sh $(echo $GITHUB_SHA | head -c7)"

      - name: Clean up SSH keys
        run: rm -rf ~/.ssh