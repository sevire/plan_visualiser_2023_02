# Build and push creates images (usually as part of deployment to Staging) which will become the production images
# once tested.

name: Build Docker images and push to Digital Ocean Repository

on:
  workflow_call:
    secrets:
      SECRET_DO_DOCKER_REGISTRY_API_TOKEN:
        required: true
      SECRET_DO_DOCKER_REGISTRY_NAME:
        required: true
jobs:
  build_and_push_docker_images:
    runs-on: ubuntu-latest
    steps:
    # Checks out the repository code to the runner with write access to allow commit
    - name: Checkout Development or master branch
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up version variables
      id: version
      run: |
          echo "SEMANTIC_VERSION=$(cat devops/VERSION)" >> $GITHUB_OUTPUT
          echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_OUTPUT

    - name: Set Image Tag With version number and build number
      id: set-image-tag
      run: |
        IMAGE_TAG="v${{ steps.version.outputs.SEMANTIC_VERSION }}-build.${{ steps.version.outputs.BUILD_NUMBER }}"
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        
        # Save the tag for production use
        echo "${IMAGE_TAG}" > devops/image_tag.txt

    # Commits successful_staging_tag.txt to repo for use in production deployment later
    - name: Commit file with image tag for later use by deploy to Production
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"        
        git checkout ${{ github.ref_name }}
        git add devops/image_tag.txt
        git commit -m "Update image tag for staging deploy [ci skip]"
        git push

    # Installs the Digital Ocean CLI tool for interacting with DO services
    - name: Install Digital Ocean command line - doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.SECRET_DO_DOCKER_REGISTRY_API_TOKEN }}

    # Authenticates with the DigitalOcean Container Registry using temporary credentials
    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    # Builds the Nginx Docker image using the specified Dockerfile
    - name: Build Docker image for Nginx with version tag
      run: docker build
        --file ./devops/docker/nginx/DockerfileRemote
        --tag ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/nginx:${{ steps.set-image-tag.outputs.IMAGE_TAG }}
        .

    # Builds the Gunicorn Docker image using the specified Dockerfile
    - name: Build Docker image for Gunicorn with version tag
      run: docker build
        --file ./devops/docker/gunicorn/Dockerfile
        --tag ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/gunicorn:${{ steps.set-image-tag.outputs.IMAGE_TAG }}
        .

    # Uploads the built Nginx image to the DigitalOcean Container Registry
    - name: Push Nginx image to DigitalOcean Container Registry
      run: docker push ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/nginx:${{ steps.set-image-tag.outputs.IMAGE_TAG }}

    # Creates additional tag indicating this is the latest Nginx image
    - name: Create alias tag for Nginx image as latest and push
      run: |
        docker tag ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/nginx:${{ steps.set-image-tag.outputs.IMAGE_TAG }} ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/nginx:latest
        docker push ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/nginx:latest

    # Uploads the built Gunicorn image to the DigitalOcean Container Registry
    - name: Push Gunicorn image to DigitalOcean Container Registry
      run: docker push ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/gunicorn:${{ steps.set-image-tag.outputs.IMAGE_TAG }}

    # Creates additional tag indicating this is the latest Gunicorn image
    - name: Create alias tag for Gunicorn image as latest and push
      run: |
        docker tag ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/gunicorn:${{ steps.set-image-tag.outputs.IMAGE_TAG }} ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/gunicorn:latest
        docker push ${{ secrets.SECRET_DO_DOCKER_REGISTRY_NAME }}/planvisualiser/gunicorn:latest
