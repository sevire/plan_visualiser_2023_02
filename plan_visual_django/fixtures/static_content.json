[
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 1,
    "fields": {
      "slug": "what-is-plan-on-one-page",
      "title": "What Is Plan On One Page",
      "content": "Plan On One Page is an application aimed at project managers who face the repetitive task of having to create a one page summary of a project plan in a visually striking format for sharing with project meetings, senior stakeholder reports or other use cases.\r\n\r\n## Why was Plan On One Page written?\r\n\r\nPlan On One Page has a single objective of allowing users, typically project managers, easily to import a project plan and then create a  visualisation of the plan which takes summary or detailed tasks and places them onto a visual in a way which makes good use of space and is nicely formatted.\r\n\r\n## What does Plan On One Page do?\r\n\r\nKey features and reasons to use Plan On One Page:\r\n\r\n- Avoids the painstaking work often taken by project managers in creating (often in PowerPoint) a one page summary of a plan, and then keeping that summary up to date as the plan changes, and also ensuring that tasks are properly aligned and of the right length to represent tasks on the plan and their correct dates.\r\n- Makes it easy to create a summary of a plan which isn't constrained by how the plan is structure in MS Project or whichever app the plan was created in.\r\n- Supports the use of swimlanes to present the plan in a way which is logical for the audience.\r\n- Allows multiple different visualisations of a plan to be created.\r\n- Visualisations are automatically updated when a new version of the plan is available.\r\n- Allows the addition of one or more timelines to the visual in months, quarters, half-years or years.\r\n- Allows styling to be fine tuned, with the option to alter colours, shapes for activities, flow of text in an activity to ensure it doesn't run off the and of the page, for example.\r\n\r\n## How do I use Plan On One Page?\r\n\r\nPlan On One Page has a simple workflow, which is:\r\n\r\n- Export your project plan from MS Project or other app into Excel in one of the supported formats\r\n- Import your project plan in Excel format into Plan On One Page\r\n- Create an initial Plan On One Page from your plan.\r\n- Define what Swimlanes you want on the Plan On One Page\r\n- For each swimlane, define which activities or milestones you want in the Plan On One Page and add  them\r\n- Adjust the position of activities within the swimlane.  Activities can appear on the same line if required which help in making use of the space and helps create a logical format for viewers.  Also the activity names can be made to flow to the left or the right so that they don't interfere with other activities or the end of the visual.\r\n- Add up to four timelines as required\r\n- Adjust colours, shapes as required, for swimlanes, timelines, activities and milestones.\r\n- When the plan changes, reupload and the Plan On One Page will update automatically.\r\n- Create more than one Plan On One Page for any given plan for different purposes",
      "parent": 6,
      "order": 1
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 2,
    "fields": {
      "slug": "file-type-excel-01-msp-export-default-01",
      "title": "Using MS Project Export To Excel",
      "content": "Microsoft Project supports export to Excel, and the only thing you need to do in order to get a file that can be processed by PlanOnOnePage is to ensure the required fields are included.  The fields required are shown below with the default Excel field under which each MSP field will be exported:\r\n\r\n- Name (Name)\r\n- Start (Start_Date)\r\n- Finish (Finish_Date)\r\n- Duration (Duration)\r\n- Outline Level (Outline_Level)\r\n\r\nThe steps to export a MS Project file are as follows:\r\n<table class=\"table\">\r\n    <tbody>\r\n        <tr>\r\n            <td style=\"width: 60%\" class=\"text-center\">\r\n                <img style=\"width: 80%; padding-top: 10%; padding-bottom: 10%\" src=\"/static/plan_visual_django/images/static_text_images/Screenshot 2025-04-01 at 08.22.29.png\" alt=\"Another Screenshot\" class=\"img-fluid shadow\">\r\n            </td>\r\n            <td style=\"width: 40%\" >\r\n                <ol>\r\n                    <li>From the MSP application select File | Export.</li>\r\n                    <li>Click \"Save Project as File\".</li>\r\n                    <li>In \"Other File Types\" click \"Microsoft Excel Workbook.</li>\r\n                </ol>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td class=\"text-center\">\r\n                <img style=\"width: 80%\" src=\"/static/plan_visual_django/images/static_text_images/Screenshot 2025-04-01 at 08.24.05.png\" alt=\"Another Screenshot\" class=\"img-fluid shadow\">\r\n            </td>\r\n            <td>\r\n                <ol>\r\n                    <li>Select location where you want the file to be downloaded to, and the file name.</li>\r\n                </ol>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td class=\"text-center\">\r\n                <img style=\"width: 80%\" src=\"/static/plan_visual_django/images/static_text_images/Screenshot 2025-04-01 at 08.24.20.png\" alt=\"Another Screenshot\" class=\"img-fluid shadow\">\r\n            </td>\r\n            <td>\r\n                <ol>\r\n                    <li></li>\r\n                </ol>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td class=\"text-center\">\r\n                <img style=\"width: 80%\" src=\"/static/plan_visual_django/images/static_text_images/Screenshot 2025-04-01 at 08.24.30.png\" alt=\"Another Screenshot\" class=\"img-fluid shadow\">\r\n            </td>\r\n            <td>\r\n                <p>1. From the MSP application select File | Export.</p>\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td class=\"text-center\">\r\n                <img style=\"width: 80%\" src=\"/static/plan_visual_django/images/static_text_images/Screenshot 2025-04-01 at 08.22.29.png\" alt=\"Another Screenshot\" class=\"img-fluid shadow\">\r\n            </td>\r\n            <td>\r\n                <p>1. From the MSP application select File | Export.</p>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>",
      "parent": 15,
      "order": 3
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 3,
    "fields": {
      "slug": "file-type-excel-02-smartsheet-export-01",
      "title": "Using Smartsheet Excel Export",
      "content": "If your project plan has been created in Smartsheet (link to Smartsheet) then it is very easy to export in a format which can be imported into PlanOnOnePage.\r\n\r\nIf your project plan isn't in Smartsheet or MS Project you may be able to import it into Smartsheet and then export it into Excel, which may be an easy workflow.\r\n\r\nSmartsheet supports all the fields required to import and process a plan within the PlanOnOnePage app, but the Id column isn't included by default.  The Id column is required if you want the ability to re-import future versions of a plan and for the app to remember which activities were in any visuals that you had created and adjust them accordingly.\r\n\r\nHowever the Id column can be added very easily, using the following steps\r\n\r\n1. Ensure you are in the GANTT view.\r\n2. Right click on the column to the right of where you would like to insert the Id column.\r\n3. Click on the \"Insert Column Left\" option.\r\n4. A \"New Column\" Dialogue box will be displayed.\r\n5. Enter \"Id\" as the name (note case - this is important).\r\n6. For \"Column Type\" click on the \"# Auto Number\" option.\r\n\r\nThis will assign a number to each row.  Note you may need to save the plan for this column to be updated.  Initially the numbers will be sequential but you will see that if you insert rows between two numbered rows, the number will stick to the original row it was assigned to, and the new row will be allocated one greater than whatever is the highest number which has been allocated.\r\n\r\nThis means that if you update the plan and add new activities between others, the Plan On One Page app will keep track if which activities have been added, deleted or are still present, and adjust any visuals associated with that plan.\r\n\r\nOnce you have added the Id column you can then easily export the plan to Excel with the following steps:\r\n\r\n1. Ensure your plan is open and in the GANTT view\r\n2. From the menu at the top of the app screen select File | Export.\r\n3. In the export sub-menu select the Excel option.\r\n\r\nThe exported file will be downloaded to your default downloads folder (dependent upon your OS and browser)",
      "parent": 15,
      "order": 4
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 5,
    "fields": {
      "slug": "landing-page",
      "title": "Plan On One Page",
      "content": "![Plan On One Page logo](/static/plan_visual_django/images/static_text_images/SplashImage.png)\r\n\r\n## Welcome to Plan On One Page.\r\n\r\nAre you a Project Manager, Programme Manager, PMO Manager or anyone who works with project plans and has a need to create a visually compelling one page representation of your project plan.\r\n\r\nThen this application is for you!\r\n\r\nRead the help pages and feel free to use the app.  It is an Alpha version so there will be bugs and some missing features, but the app should be useable and useful if it fits your use case.\r\n\r\nFeel free to feedback - details in the help pages.\r\n\r\nI hope you get some benefit from using the app.\r\n\r\nThomas.",
      "parent": null,
      "order": 0
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 6,
    "fields": {
      "slug": "getting-started",
      "title": "Getting Started",
      "content": "These pages will help in getting started with using the app.  Follow the links to the left for help in logging in, uploading your first plan, creating a visual or getting to know the main interface.",
      "parent": null,
      "order": 1
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 7,
    "fields": {
      "slug": "getting-started-log-in",
      "title": "Registering and Logging In",
      "content": "You don't need to log in to use the app, so if you wish to skip this step then just click on Upload a Plan below to learn how to upload a plan.\r\n\r\nIf you don't log in the app will attempt to remember who you are and give you access to any uploaded plans and any visuals you have created, but only if your browser is set up to allow this.\r\n\r\nCreating an account allows you access to a couple of additional features such as adding your own colours and styles.\r\n\r\nIf you choose to create an account you can choose whether or not to provide an email address.  If you don't provide an email address then you won't be able to reset your password if you forget it, but otherwise there are no features that you won't have access to.\r\n\r\nTo register\r\n- Click on the register button (top right of the browser)\r\n- Add a username or an email address or both\r\n- Enter a password and then confirm it.\r\n- Click Enter\r\n\r\nTo log in\r\n- Click Login (top right of the browser)\r\n- Enter your username or email address\r\n- Enter your password\r\n- Click Enter\r\n\r\nYou will be taken to the My Plans page.",
      "parent": 6,
      "order": 5
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 8,
    "fields": {
      "slug": "getting-started-upload",
      "title": "Upload a Plan",
      "content": "In the current version of the app, plan files need to be in Excel and need to correspond to one of the supported file formats.  Many planning apps allow you to export in Excel format but you need to ensure the right columns are in the file with the right column names in order for the file to upload.\r\n\r\nDetails on the formats can be found at link below.\r\n\r\n[Supported File Types and Mapping](/pv/view-file-types)\r\n\r\nFurther formats will be added based on feedback and demand.\r\n\r\nIn order to upload your Excel file, follow the steps below:\r\n\r\n- Click **“Add Plan File”** from the Manage Plans page.\r\n- Select a file from your local computer.\r\n- Choose a plan file type (Currently Default Smartsheet or Default MS Project supported).  \r\n- Give your plan a name (default name is pre-populated) \r\n- Click **Upload Plan**.  \r\n\r\nIf any fields are missing or invalid, you’ll see an error message which will usually identify the missing fields and the expected field name so you can adjust the column name on your input file and retry.\r\n\r\n![Upload Plan Form](/static/plan_visual_django/images/static_text_images/UploadPlanForm.png)\r\n\r\nOnce your plan is uploaded, see **Create A Visual** under Getting Started in the help pages.\r\n\r\nIf you have problems uploading your plan, see the **Troubleshooting File Import** under Importing Files in the help pages.",
      "parent": 6,
      "order": 6
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 9,
    "fields": {
      "slug": "getting-started-visual",
      "title": "Create a Visual",
      "content": "Once your plan has been successfully uploaded, you will see it in the list of uploaded plans on the **\"Manage Plans\"** page.  At the right hand side there is a button to **\"Manage Visuals\"** which will allow you to view, amend and add new visuals for this plan.\r\n\r\nYou can have more than one visual for the same plan, which may be useful if you want, say, a milestone view for one senior management meeting and a slightly more detailed view for your project working group meetings.\r\n\r\nTo create a new visual for a plan:\r\n\r\n- Click on the Manage Visuals button on the line corresponding to the plan you want to add a new visual for.\r\n- You then have the option to add an auto-generated visual or add a default (blank) visual.\r\n\r\nNOTE: The auto-generated visual is a new and experimental feature.  It attempts to work out which activities to add to the visual and which swimlanes to add based upon the structure of your plan.  For plans with a clean structure and not too many high level activities, the algorithm gives a reasonable starting point for your visual a lot of the time.  But if your plan is very complex or has a lot of activities at the top level, the algorithm will struggle to work out the best layout.\r\n\r\nFeel free to try this option and also feel free to feed back on how will this worked for you.\r\n\r\nWhether you choose the Add Default Visual or Add Auto Visual, once the visual has been created you will be taken to the Edit Visual page which allows you to add or remove activities to the visual, move activities within a swimlane or to a different swimlane, add timelines or move timelines or swimlanes, and also to download an image of the visual.",
      "parent": 6,
      "order": 7
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 10,
    "fields": {
      "slug": "getting-started-interface",
      "title": "Creating a Visual - Explore The Interface",
      "content": "The main page used for creating the interface is the edit visual page.  This page includes panels and control to add or remove activities from the visual, to move and format activities, change the order of swimlanes or timelines, or toggle the inclusion of timelines, amongst other activities.\r\n\r\nThe graphic below describes the key panels in the main user interface.\r\n\r\n[![Visual Screen Overview](/static/plan_visual_django/images/static_text_images/EditVisualScreenOverview.png)](/static/plan_visual_django/images/static_text_images/EditVisualScreenOverview.png)",
      "parent": 6,
      "order": 8
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 11,
    "fields": {
      "slug": "alpha-testing-notes",
      "title": "Alpha Version - What Does This Mean",
      "content": "The Plan On One Page app is currently in its Alpha version.  This means that while the app is in a state which can be used and most features are in place, there may be one or two features that are missing or not fully implemented, and there may be bugs in the features which are present.\r\n\r\nThe app is also a bit slow at times, particularly when plotting the visual.\r\n\r\nIn taking the decision to make the application available, I have assured myself that the app is sufficiently feature rich and robust that it should be found to be a useful tool for the target audience.\r\n\r\nMost users of the Alpha version will be those in my network who I believe will find the app useful.  If you stumble across the app and wish to use it, feel free to do so, but I'd appreciate it if you would make contact with me so that I can monitor your usage and provide support where needed.\r\n\r\nAdditionally, I welcome any feedback on the app in its current version and suggestions for additional features or other ways in which it can be improved.  I have a backlog of tickets to drive future releases, but getting feedback will help me to validate the list and also to prioritise features and updates.\r\n\r\nSee the **Giving Feedback** page for more information on giving feedback.\r\n\r\nThomas",
      "parent": 18,
      "order": 3
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 12,
    "fields": {
      "slug": "about-the-developer",
      "title": "About The Developer",
      "content": "I'm Thomas - welcome to anyone who has found themselves on this page.\r\n\r\nI have worked in the field of delivery of change into businesses over many years, and in many roles, including technical, project manager, delivery manager, programme manager, PMO support and many more.\r\n\r\nA need that I have encountered many times is that of producing a good looking summary of a project plan on a single page.  This has almost always been with the intention of including the visual in a slide pack either for senior stakeholders or to share with project team members.\r\n\r\nTypically, the activity to do this either takes up many hours of time in order to get a visual which both looks good and is accurate, or is not done effectively, and PMs often end up sharing either a very high level visual of limited use, or a rolled up version of the MS Project GANTT chart or similar, which is accurate but difficult to read and limited in what it shows.\r\n\r\nAlso, updating the visual when the plan changes is very time consuming.\r\n\r\nWhen I created my own visuals by hand, I would typically include the following features:\r\n- Distinguish between milestones and activities\r\n- Put related activities (typically phases) into different swimlanes\r\n- Place activities on the same line in the visual to make better use of the space\r\n- Use colour to pick out key activities such as critical path\r\n\r\nI have experimented with various attempts at automating this process and my earliest version of this app was a Python script which used columns from an MS Project plan to indicate which activities to include in the plan where to place them, what colour they should be etc., and the script created a powerpoint deck with the activities placed as shapes onto a slide.\r\n\r\nThis went down very well with stakeholders as the visual was very easy to read, and because it was created automatically, was very accurate (i.e. start and end dates were precisely represented by the position of activities on the page.\r\n\r\nI decide to turn my script into a web app about 2 years ago, and have been working on it ever since.  It has been a bit of a roller coaster as, while I have worked as a developer before, I have never needed to write a full stack app before and so I have had to learn a raft of new skills to get this app to this point.\r\n\r\nI'm aware that there are some aspects of the app which are a little clunky, but I believe it's at the point where it can be genuinely useful and so I'm keen to get some feedback from people to help me plan its future.\r\n\r\nYou can use the app freely, but feel free to contact me if you intend to use it and I will try to support you where required.  Also feel free to make contact with any feedback or other thoughts.\r\n\r\nThanks you, I hope you enjoy the app.\r\n\r\nThomas Gaylard",
      "parent": 18,
      "order": 10
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 13,
    "fields": {
      "slug": "working-with-activities",
      "title": "Working With Activities",
      "content": "A new activity can be added to the visual by first selecting it in the left hand Plan Activities panel and then clicking it again to toggle it in or out of the visual.\r\n\r\nWhen an activity is added to the visual by selecting the activity with the mouse in the left hand plan tree, it is initially added to the bottom of whichever swimlane is currently selected as default (in the swimlane panel), and will be marked as selected in the visual.\r\n\r\n**Vertical Position**:  You can then move the activity vertically to where you want it to be, using the up and down arrows in the Track attribute within the Activity Properties panel.  You may wish to move the activity to the same track as one or more other activities - and a key feature of the app is that you can make use of space by placing activities on the same line if you wish to.\r\n\r\n**Text Flow**: The activity name is plotted separately from the activity shape, because for short activities there may not be enough room to fit the text within the shape.  This is a key feature of the app which scores over, say, using PowerPoint to plot shapes for activities.  So the text will often flow out of the shape and so in order to help make best use of the space available, you can control how the activity name text flows, using the three buttons in the Text Flow attribute within the Activity Properties panel.  The options are:\r\n- Flow Right - Text is aligned to the left end of the activity shape and flows to the right, overflowing the shape at the right edge if the text is longer than the shape for the activity.\r\n- Flow Left - Text is aligned to the right end of the activity shape and flows to the left.\r\n- Centred - Text is centred and so may flow out of both left and right if it is longer than the activity shape\r\n\r\n**Shape**: When an activity is first added to the visual, it will be given a default shape which will vary depending upon whether the activity is a milestone or not.  Typically a Milestone will be given a *Diamond* or *Triangle* shape, and a non-milestone will be given a *rectangle*, *rounded rectangle* or *bullet* shape (a bullet is a rectangle with semi-circular ends).  The shape can be changed using the dropdown in the shape attribute of the Activity Properties panel.\r\n\r\n**Style**: An activity is initially given whatever is set to be the default style for an activity or milestone.  This can be changed using the drop down in the Style attribute of the Activity Properties panel.\r\n\r\n**Height**: An activity in the visual by default has a height of one track, but this can be changed for an individual activity using the up and down arrows in the Height attribute of the Activity Properties panel",
      "parent": 14,
      "order": 5
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 14,
    "fields": {
      "slug": "working-with-visuals",
      "title": "Working With Visuals",
      "content": "Usually, the objective when creating a visual is to create a good representation of the project plan on a single page.  In order to achieve this a number of design decision need to be made.  Here are some considerations on how to approach this.\r\n\r\n1. What needs to be in the visual to ensure it represents what you need it to.  For example if you have a full project plan including lots of activities and milestones for stage gates or dependencies which drive the dates of other activities, then you may not need to include those in the visual itself.\r\n\r\n2. How many swimlanes do you need?  Sometimes one may be enough, and if you go above five, trying to keep the visual on one page and not look really cluttered will be tricky.  If your plan is very structured with top level activities representing either phases or functionally related activities then you may want a swimlane for each Phase, or maybe a swimlane for two phases.  For a software development, for example, you may wish to have Discovery and Design in the same swimlane, and Build and Test in the same swimlane.\r\n\r\n3. How much granularity do you need? For a very complex plan with many levels, you are probably going to want to include high level summary activities rather than lower level tasks.  A good approach is to start with very high level activities and then add some more detail once you have something.  Starting with too much detail makes it more difficult to adjust later.",
      "parent": null,
      "order": 5
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 15,
    "fields": {
      "slug": "importing-files",
      "title": "Importing Files",
      "content": "In the current, Alpha version of the app, the imported plan file must be in Excel format.  This is likely to be extended to other formats, such as native MS Project format at a later date.\r\n\r\nThere are two Excel field mappings currently supported, which should be easy to create if you are exporting your project from either Smartsheets or MS Project.\r\n\r\nSee the page that you want to use for more details on that format.",
      "parent": null,
      "order": 2
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 16,
    "fields": {
      "slug": "troubleshooting-file-import",
      "title": "Troubleshooting File Import",
      "content": "Importing a file for the first time can be a bit fiddly and this is something that I plan to improve.  If the import fails then usually it will be because an expected field isn't included or doesn't have the right field name.\r\n\r\nIn this case the error message at the top of the screen should give a list of the missing fields and their expected name.\r\n\r\nOther errors may not give such an explicit error message.  Scenarios which could result in a failure include:\r\n\r\n- Missing dates in activities\r\n- Inability for the app to work out which sheet the plan is in.  This may well happen if you've exported the plan several times and the file name doesn't match the sheet name.  The app attempts to identify which sheet the plan is in if there is more than one but can't always achieve this.\r\n- Too many blank lines before the activity records appear in the spreadsheet.\r\n- Also if there are too many blank lines within the plan, the app may not read in activities below the blank lines.\r\n\r\nIf you are getting errors which you are unable to explain, feel free to contact me and I will try to help.",
      "parent": 15,
      "order": 1
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 17,
    "fields": {
      "slug": "reimporting-files",
      "title": "Updating Plan File",
      "content": "A key feature of the app is that once you have created a visual for a plan, if the plan changes, you can reimport your plan and any activities which are in the visual will be updated.  This means that:\r\n\r\n- If the dates for the activity have changed, that will be reflected\r\n- If the name of the activity has changed, that will be reflected\r\n\r\nNote that the impact of the changes may be that activities no longer fit within the layout you have created.  For example if you had two sequential activities on the same line and in the reimported plan the first activity now finishes later than it did and that overlaps with the second activity, then you will need to reposition the activities accordingly.",
      "parent": 15,
      "order": 2
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 18,
    "fields": {
      "slug": "about-plan-on-one-page",
      "title": "About Plan On One Page",
      "content": "Blah blah Blah",
      "parent": null,
      "order": 10
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 19,
    "fields": {
      "slug": "giving-feedback",
      "title": "Giving Feedback",
      "content": "I welcome feedback on whether you have found the app useful or not, and I would be very happy to see the examples of visuals you have created using the app.\r\n\r\nIf you encounter bugs or features which don't seem to be working correctly or are difficult to use, then please let me know of these and I will add them to my backlog and fix when I can.\r\n\r\nI am also keen to get thoughts about additional features, whether they are extending existing features (e.g. support for other import file formats) or something brand new (e.g. drag and drop of actives in the visual).\r\n\r\nYou can contact me [planononepage@genonline.co.uk](mailto:planononepage@genonline.co.uk)",
      "parent": 18,
      "order": 5
    }
  },
  {
    "model": "plan_visual_django.staticcontent",
    "pk": 20,
    "fields": {
      "slug": "exporting-a-visual",
      "title": "Exporting a Visual",
      "content": "For now, the only way to export the visual is to download it as an image.  This can be achieved by clicking on the **Download As Image** button in the main edit screen.  A high resolution image of the visual will be downloaded to your local computer.\r\n\r\nAdditional export options will be added in the future.  The next one to be added is likely to be the creation of a PowerPoint slide with all the visual elements to be represented as PowerPoint shapes.\r\n\r\nFeel free to feedback any other requests for export formats.",
      "parent": 14,
      "order": 10
    }
  }
]